openapi: 3.0.0

info:
  title: ak18b API
  description: API for swt-p/18 project ak18b
  version: 0.0.1

servers:
  - url: http://pcai042.informatik.uni-leipzig.de:1590/api/
    description: Demo server

tags:
  - name: Authentication
    description: Simple request for authentication
  - name: Users Resource
    description: CRUD operations for the user
  - name: Types Resource
    description: CRUD operations for Types
  - name: Items Resource
    description: CRUD operations for Items
  - name: Fields Resource
    description: Available field information

paths:
  /authenticate:
    post:
      tags:
        - Authentication
      summary: Generate JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: me11qygu
                password:
                  type: string
                  format: password
                  example: MostSecureP4asswo!
      responses:
        '200':
          description: Successfully authenticated (Content describes the payload of the returned JWT)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: Unauthorized
                message: Authentication failed due to invalid credentials

  /users:
    post:
      security:
        - jwt: []
      tags:
        - Users Resource
      operationId: user-create
      summary: Create an User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: New resource successfully created
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/User'
        '409':
          $ref: '#/components/responses/Conflict'

  /users/{userId}:
    parameters:
      - in: path
        name: userId
        description: The User's id
        schema:
          type: integer
        required: true
    get:
      security:
        - jwt: []
      tags:
        - Users Resource
      operationId: user-get
      summary: Get an User
      responses:
        '200':
          description: The requested resource has been found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      security:
        - jwt: []
      tags:
        - Users Resource
      operationId: user-update
      summary: Modify an User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: The requested resource has been found and updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
    delete:
      security:
        - jwt: []
      tags:
        - Users Resource
      operationId: user-delete
      summary: Delete an User
      responses:
        '204':
          description: Successfully delete resource
        '404':
          $ref: '#/components/responses/NotFound'

  /types:
    get:
      security:
        - jwt: []
      tags:
        - Types Resource
      summary: Get a list of all types
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
      responses:
        '200':
          description: The requested resource has been found
          headers:
            X-Total:
              $ref: '#/components/headers/X-Total'
            X-Total-Pages:
              $ref: '#/components/headers/X-Total-Pages'
            X-Per-Page:
              $ref: '#/components/headers/X-Per-Page'
            X-Page:
              $ref: '#/components/headers/X-Page'
            X-Prev-Page:
              $ref: '#/components/headers/X-Prev-Page'
            X-Next-Page:
              $ref: '#/components/headers/X-Next-Page'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Type'
    post:
      security:
        - jwt: []
      tags:
        - Types Resource
      summary: Create a Type
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Type'
      responses:
        '201':
          description: New resource successfully created
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Type'
        '409':
          $ref: '#/components/responses/Conflict'
  /types/{typeId}:
    parameters:
      - in: path
        name: typeId
        description: The Type's id
        schema:
          type: integer
        required: true
    get:
      security:
        - jwt: []
      tags:
        - Types Resource
      summary: Get a Type
      responses:
        '200':
          description: The requested resource has been found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Type'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      security:
        - jwt: []
      tags:
        - Types Resource
      summary: Modify a Type
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Type'
      responses:
        '200':
          description: The requested resource has been found and updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Type'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
    delete:
      security:
        - jwt: []
      tags:
        - Types Resource
      summary: Delete a Type
      responses:
        '204':
          description: Successfully delete resource
        '404':
          $ref: '#/components/responses/NotFound'

  /items:
    get:
      security:
        - jwt: []
      tags:
        - Items Resource
      summary: Get a list of Items
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
      responses:
        '200':
          description: The requested resource has been found
          headers:
            X-Total:
              $ref: '#/components/headers/X-Total'
            X-Total-Pages:
              $ref: '#/components/headers/X-Total-Pages'
            X-Per-Page:
              $ref: '#/components/headers/X-Per-Page'
            X-Page:
              $ref: '#/components/headers/X-Page'
            X-Prev-Page:
              $ref: '#/components/headers/X-Prev-Page'
            X-Next-Page:
              $ref: '#/components/headers/X-Next-Page'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddedItem'

  /items/{typeId}:
    parameters:
      - in: path
        name: typeId
        description: The Item's type id
        schema:
          type: integer
        required: true
    get:
      security:
        - jwt: []
      tags:
        - Items Resource
      summary: Get a list of Items by type
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/per_page'
      responses:
        '200':
          description: The requested resource has been found
          headers:
            X-Total:
              $ref: '#/components/headers/X-Total'
            X-Total-Pages:
              $ref: '#/components/headers/X-Total-Pages'
            X-Per-Page:
              $ref: '#/components/headers/X-Per-Page'
            X-Page:
              $ref: '#/components/headers/X-Page'
            X-Prev-Page:
              $ref: '#/components/headers/X-Prev-Page'
            X-Next-Page:
              $ref: '#/components/headers/X-Next-Page'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddedItem'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      security:
        - jwt: []
      tags:
        - Items Resource
      summary: Create an Item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '201':
          description: New resource successfully created
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/EmbeddedItem'
        '409':
          $ref: '#/components/responses/Conflict'

  /items/{typeId}/{itemId}:
    parameters:
      - in: path
        name: typeId
        description: The Item's type id
        schema:
          type: integer
        required: true
      - in: path
        name: itemId
        description: The Item's internal id
        schema:
          type: integer
        required: true
    get:
      security:
        - jwt: []
      tags:
        - Items Resource
      summary: Get an Item
      responses:
        '200':
          description: The requested resource has been found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddedItem'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      security:
        - jwt: []
      tags:
        - Items Resource
      summary: Modify an Item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: The requested resource has been found and updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddedItem'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
    delete:
      security:
        - jwt: []
      tags:
        - Items Resource
      summary: Delete an Item
      responses:
        '204':
          description: Successfully delete resource
        '404':
          $ref: '#/components/responses/NotFound'
          
  /fields/{typeId}:
    parameters:
      - in: path
        name: typeId
        description: The Item's type id
        schema:
          type: integer
        required: true
    get:
      security:
        - jwt: []
      tags:
        - Fields Resource
      summary: Get an Item
      responses:
        '200':
          description: The requested resource has been found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fields'
        '404':
          $ref: '#/components/responses/NotFound'
          
  /fields:
    parameters:
      - in: path
        name: typeId
        description: The Item's type id
        schema:
          type: integer
        required: true
    get:
      security:
        - jwt: []
      tags:
        - Fields Resource
      summary: Get an Item
      responses:
        '200':
          description: The requested resource has been found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fields'
        '404':
          $ref: '#/components/responses/NotFound'
          

components:
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    User:
      type: object
      description: Represents a user object
      properties:
        id:
          type: integer
          format: int24
          readOnly: true
          example: 1337
          description: The user's unique id
        companyId:
          type: integer
          format: int16
          example: 4
          description: The id of the user's company
        username:
          type: string
          example: me11qygu
          description: |
            The user's unique username\
            \
            We enforce the following restrictions for usernames:
            1. Names can contain most valid [UTF-8](https://en.wikipedia.org/wiki/UTF-8) characters
            2. Names must be between 2 and 32 characters long
            3. Names are sanitized and trimmed of leading, trailing, and excessive internal whitespace
        password:
          type: string
          format: password
          writeOnly: true
          example: MostSecureP4asswo!
          description: |
            The user's password\
            \
            We enforce the following restrictions for passwords:
            1. Passwords can contain upper-case and lower-case letters, numerical digits, special characters (``~!@#$%^&*_-+=`|\(){}[]:;"'<>,.?/``)
            2. Passwords must be between 8 and 32 characters long
            3. Passwords has to contain at least one upper-case and lower-case letter, one numerical digit and special character
        email:
          type: string
          example: me11qygu@example.com
          description: The user's unique email address
        roles:
          type: array
          items:
            type: integer
            format: int24
          uniqueItems: true
          example: [ 2, 7 ]
          description: array of role object ids
      required:
        - id
        - companyId
        - username
        - password
        - roles
    Type:
      type: object
      description: Respresents an object's type (metadata)
      properties:
        id:
          type: integer
          readOnly: true
          example: 12
          description: The type's unique id
        name:
          type: string
          example: Laptop
          description: The type's name
        fields:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: MAC-Address
                description: Name of the field
              type:
                type: string
                enum:
                  - string
                  - number
                  - boolean
                  - file
                  - color
                  - date
                  - reference
                example: string
                description: Type of the field
              required:
                type: boolean
                example: true
                description: Is the field required to be filled out
              unique:
                type: boolean
                example: false
                description: Should the field's value be unique
              referenceTypeId:
                type: integer
                example: 3
                description: |
                  Id of the type the field references\
                  Only set when type is `reference`
            required:
              - name
              - type
              - required
              - unique
            description: Represents a single field of a type
          description: A list of all properties an type owns
      required:
        - id
        - name
        - fields
    Item:
      type: object
      description: Respresents a physical object with all its properties
      properties:
        typeId:
          type: integer
          readOnly: true
          description: The id of the type of the item
        id:
          type: integer
          readOnly: true
          description: The items internal (type dependant) unique id
        fields:
          type: object
          example: {"MAC-Address":"12-34-56-78-9A-BC"}
          description: An Object containing all fields of an item according to the item type
      required:
        - id
        - typeId
        - fields
<<<<<<< HEAD
    EmbeddedItem:
      type: object
      description: A combination of types and items
      properties:
        types:
          type: array
          description: List of all types based on the list of items
          items:
            $ref: '#/components/schemas/Type'
        items:
          type: array
          description: List of all requested items
          items:
            $ref: '#/components/schemas/Item'
=======
    Fields:
      description: Respresents a list of available field names
      properties:
        fields:
          readOnly: true
          description: Names of the fields
          type: array
          items:
            type: string

>>>>>>> 5d43928422547a352d3042e9db46262916e2e0fe
    Error:
      type: object
      properties:
        error:
          type: string
          example: Not found
          description: Short description of the error
        message:
          type: string
          example: The requested resource could not be found
          description: Longer description which contains more specific information
        cause:
          oneOf:
            - type: object
              additionalProperties: true
            - type: array
              items:
                type: object
                additionalProperties: true
          description: This may contain error specific information about why the request failed
      required:
        - error
        - message

  parameters:
    page:
      in: query
      name: page
      description: Index of the current page
      schema:
        type: integer
      required: true
    per_page:
      in: query
      name: per_page
      description: Items displayed per page
      schema:
        type: integer
      required: true
    

  headers:
    X-Total:
      description: Total number of entries
      schema:
        type: integer
    X-Total-Pages:
      description: Total number of pages
      schema:
        type: integer
    X-Per-Page:
      description: Number of entries per page
      schema:
        type: integer
    X-Page:
      description: Index of current page
      schema:
        type: integer
    X-Prev-Page:
      description: Index of previous page
      schema:
        type: integer
    X-Next-Page:
      description: Index of next page
      schema:
        type: integer

  responses:
    Conflict:
      description: The requeste could not be processed because of conflict in the current state of the resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Conflict
            message: The requeste could not be processed because of conflict in the current state of the resource
            detail: [{"field":"username","message":"The selected username is already taken"},{"field":"password","message":"Needs to contain at least one special char"}]
    NotFound:
      description: The requested resource could not be found but may be available in the future
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Not found
            message: The requested resource could not be found
