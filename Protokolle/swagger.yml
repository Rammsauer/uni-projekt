openapi: 3.0.0

info:
  title: ak18b API
  description: API for swt-p/18 project ak18b
  version: 0.0.1

servers:
  - url: http://pcai042.informatik.uni-leipzig.de:1590/api/
    description: Demo server

tags:
  - name: Authentication
    description: Simple request for authentication
  - name: Users Resource
    description: CRUD operations for the user
  - name: Items Resource
    description: CRUD operations for Items

paths:
  /authenticate:
    post:
      tags:
        - Authentication
      summary: Generate JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: me11qygu
                password:
                  type: string
                  format: password
                  example: MostSecureP4asswo!
      responses:
        '200':
          description: Successfully authenticated (Content describes the payload of the returned JWT)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: Unauthorized
                message: Authentication failed due to invalid credentials
  /users:
    post:
      security:
        - jwt: []
      tags:
        - Users Resource
      operationId: user-create
      summary: Create User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: New resource successfully created
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/User'
        '409':
          $ref: '#/components/responses/Conflict'
          
  /users/{userId}:
    parameters:
      - in: path
        name: userId
        schema:
          type: integer
        required: true
    get:
      security:
        - jwt: []
      tags:
        - Users Resource
      operationId: user-get
      summary: Get a User
      responses:
        '200':
          description: The requested resource has been found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      security:
        - jwt: []
      tags:
        - Users Resource
      operationId: user-update
      summary: Modify User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: The requested resource has been found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
    delete:
      security:
        - jwt: []
      tags:
        - Users Resource
      operationId: user-delete
      summary: Delete User
      responses:
        '204':
          description: Successfully delete resource
        '404':
          $ref: '#/components/responses/NotFound'
          
          
          
  /items:
    get:
      parameters:
      - in: query
        name: page
        description: Index of the current page
        schema:
          type: integer
        required: true
      - in: query
        name: per_page
        description: Items displayed per page
        schema:
          type: integer
        required: true
      security:
        - jwt: []
      tags:
        - Items Resource
      operationId: user-get
      summary: Get a list of items
      responses:
        '200':
          headers:
            X-Total:
              description: Total amount of items
              schema:
                type: integer
          description: The requested resource has been found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
  
  /item:
    post:
      security:
        - jwt: []
      tags:
        - Items Resource
      summary: Create a new Item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                typeId:
                  type: integer
                fields:
                  type: object
                  description: All Fields required or wanted on the item
      responses:
        '201':
          description: New resource successfully created
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Item'
        '409':
          $ref: '#/components/responses/Conflict'
    put:
      security:
        - jwt: []
      tags:
        - Items Resource
      summary: Update an Item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: Id of the Item
                typeId:
                  type: integer
                  description: Id of the type of the item
                fields:
                  type: object
                  description: All Fields required or wanted on the item
      responses:
        '200':
          description: Resource updated
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Item'
        '409':
          $ref: '#/components/responses/Conflict'
  
  /item/{itemId}:    
    delete:
      parameters:
      - in: path
        name: itemId
        schema:
          type: integer
        required: true
      security:
        - jwt: []
      tags:
        - Items Resource
      summary: Delete an Item
      responses:
        '204':
          description: Resource has been deleted
        '409':
          $ref: '#/components/responses/Conflict'
    
    

components:
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    Item:
      description: Respresents a physical object with all its properties
      properties:
        id:
          type: integer
          readOnly: true
          description: The Items unique id
        typeId:
          type: integer
          description: The ID of the type of the item
        fields:
          type: object
          example: {'name':'Laptop1'}
          description: An Object containing all fields of an item according to the item type
          
        
    User:
      description: Represents a user object
      properties:
        id:
          type: integer
          format: int24
          readOnly: true
          example: 1337
          description: The user's unique id
        companyId:
          type: integer
          format: int16
          example: 4
          description: The id of the user's company
        username:
          type: string
          example: me11qygu
          description: |
            The user's unique username\
            \
            We enforce the following restrictions for usernames:
            1. Names can contain most valid [UTF-8](https://en.wikipedia.org/wiki/UTF-8) characters
            2. Names must be between 2 and 32 characters long
            3. Names are sanitized and trimmed of leading, trailing, and excessive internal whitespace
        password:
          type: string
          format: password
          writeOnly: true
          example: MostSecureP4asswo!
          description: |
            The user's password\
            \
            We enforce the following restrictions for passwords:
            1. Passwords can contain upper-case and lower-case letters, numerical digits, special characters (``~!@#$%^&*_-+=`|\(){}[]:;"'<>,.?/``)
            2. Passwords must be between 8 and 32 characters long
            3. Passwords has to contain at least one upper-case and lower-case letter, one numerical digit and special character
        email:
          type: string
          example: me11qygu@example.com
          description: The user's unique email address
        roles:
          type: array
          items:
            type: integer
            format: int24
          uniqueItems: true
          example: [ 2, 7 ]
          description: array of role object ids
      required:
        - id
        - companyId
        - username
        - password
        - roles
    Error:
      type: object
      properties:
        error:
          type: string
          example: Not found
          description: Short description of the error
        message:
          type: string
          example: The requested resource could not be found
          description: Longer description which contains more specific information
        cause:
          oneOf:
            - type: object
              additionalProperties: true
            - type: array
              items:
                type: object
                additionalProperties: true
          description: This may contain error specific information about why the request failed
      required:
        - error
        - message
  
  responses:
    Conflict:
      description: The requeste could not be processed because of conflict in the current state of the resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Conflict
            message: The requeste could not be processed because of conflict in the current state of the resource
            detail: [{"field":"username","message":"The selected username is already taken"},{"field":"password","message":"Needs to contain at least one special char"}]
    NotFound:
      description: The requested resource could not be found but may be available in the future
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Not found
            message: The requested resource could not be found